version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: connecthub-postgres
    environment:
      POSTGRES_DB: connecthub
      POSTGRES_USER: connecthub
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./ConnectHub-Backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - connecthub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U connecthub"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: connecthub-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - connecthub-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./ConnectHub-Backend
      dockerfile: Dockerfile
    container_name: connecthub-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://connecthub:${POSTGRES_PASSWORD:-secure_password123}@postgres:5432/connecthub
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password123}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-super_secure_jwt_secret_key_for_production}
      JWT_EXPIRE: 7d
      EMAIL_SERVICE: ${EMAIL_SERVICE:-gmail}
      EMAIL_USER: ${EMAIL_USER:-your-email@gmail.com}
      EMAIL_PASS: ${EMAIL_PASS:-your-app-password}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000,https://your-domain.com}
      RATE_LIMIT_WINDOW: 900000
      RATE_LIMIT_MAX: 100
      UPLOAD_MAX_SIZE: 52428800
      SOCKET_CORS_ORIGIN: ${SOCKET_CORS_ORIGIN:-http://localhost:3000}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - connecthub-network
    volumes:
      - uploads_data:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Web App
  frontend:
    build:
      context: ./ConnectHub-Frontend
      dockerfile: Dockerfile
    container_name: connecthub-frontend
    environment:
      REACT_APP_API_URL: ${API_URL:-http://localhost:5000}
      REACT_APP_SOCKET_URL: ${SOCKET_URL:-http://localhost:5000}
      REACT_APP_APP_NAME: ConnectHub
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - connecthub-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: connecthub-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/ssl/certs
      - uploads_data:/var/www/uploads
    depends_on:
      - backend
      - frontend
    networks:
      - connecthub-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: connecthub-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - connecthub-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: connecthub-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - connecthub-network
    restart: unless-stopped

  # Log Management - ELK Stack (Elasticsearch)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: connecthub-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - connecthub-network
    restart: unless-stopped

  # Log Management - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: connecthub-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - connecthub-network
    restart: unless-stopped

  # Message Queue - RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: connecthub-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-connecthub}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-rabbitmq123}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - connecthub-network
    restart: unless-stopped

  # Background Jobs Worker
  worker:
    build:
      context: ./ConnectHub-Backend
      dockerfile: Dockerfile.worker
    container_name: connecthub-worker
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://connecthub:${POSTGRES_PASSWORD:-secure_password123}@postgres:5432/connecthub
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password123}@redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-connecthub}:${RABBITMQ_PASS:-rabbitmq123}@rabbitmq:5672
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - connecthub-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  uploads_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  rabbitmq_data:

networks:
  connecthub-network:
    driver: bridge
